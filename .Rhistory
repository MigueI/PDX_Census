pdx$pophu[is.infinite(pdx$pophu)] <- NA
return(pdx$pophu)
}else{
data1
}
data1 <- if(input$radio == "Vacant Housing Units (%)"){
return(round(pdx$H0030003/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Secondary Housing Units (%)"){
return(round(pdx$H0050006/pdx$H0010001,4)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Occupied Housing Units (%)"){
return(round(pdx$H0040004/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Ocdfsacupied Housing Units (%)"){
pdx$vac.ren <- pdx$H0050002 + pdx$H0040004
pdx$vac.ren <- round(pdx$vac.ren,3)*100
return()
}else{
data1
}
return(data1)
})
output$plot <- renderPlot({
#ratio.display <- 4/3
plot.data <- data.frame(pdx$fips, hist.data = data())
ggplot(data = plot.data, aes(x = hist.data, y =..count..)) +
theme_bw() +
geom_area(stat="bin", color = top.col, size = 1, fill=low.col) +
xlab(paste(input$radio, "by Block Group")) +
ylab("Number of Block Groups") +
ggtitle(paste("Distribution of",input$radio))  #+
#coord_fixed((max(data())-min(data()))/(max(y)-0) / ratio.display)
})
output$mymap <- renderLeaflet({
# Color scheme.
pal <- colorNumeric(
palette = c(low.col,mid.col, top.col),
domain = data()
)
# Make the map.
leaflet() %>%
addProviderTiles("Thunderforest.Outdoors") %>%
#addTiles() %>%
addPolygons(data = pdx,
popup = paste(input$radio,": ", data(), "<br>","Housing Units: ", pdx$H0010001),
fillColor= ~pal(data()),
weight = 1,
fillOpacity = 0.75,
color="black") %>%
addLegend("bottomright",
pal = pal,
values = data(),
title = input$radio,
opacity = 1)
})
}
# - - -
#  UI
# - - -
ui <- fluidPage(
navbarPage("2010 Census Data", id="nav",
tabPanel("Multnomah County",
div(class="outer",
tags$head(
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = 20,
right = "auto", bottom = "auto",
width = 300, height = "auto",
radioButtons("radio", label = "Select a Variable",
choices = list("Population",
"Housing Units",
"Population per Housing Unit",
"Vacant Housing Units (%)",
"Secondary Housing Units (%)",
"Renter Occupied Housing Units (%)"),
selected = "Population"),
"The (%) symbol indicates percentage
of total housing units."),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = "auto",
right = 20, bottom = "auto",
width = 400, height = "auto",
plotOutput("plot")
)
)
)
)
)
shinyApp(ui = ui, server = server)
install.packages("scales", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("manipulate")
install.packages(c("devtools", "ggmap", "ggthemes", "htmlwidgets", "jsonlite", "leaflet", "manipulate", "RCurl", "stringi", "stringr", "tm"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("scales", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(UScensus2010blkgrp)
# Load and subset data.
#data("oregon.blkgrp10")
#pdx <- oregon.blkgrp10[oregon.blkgrp10$county=='051',]
#saveRDS(pdx, "pdx.rds")
library(ggplot2)
library(leaflet)
library(shiny)
# Load data.
setwd("~/Desktop/app/PDX_Census")
pdx <- readRDS("pdx.rds")
# Set colors.
top.col <- "darkorange"
mid.col <- "chartreuse4"
low.col <- "cadetblue4"
# - - - -
# SERVER
# - - - -
server <- function(input, output) {
# Pick relevant data.
data <- reactive({
data1 <- pdx$P0010001
data1 <- if(input$radio == "Population"){
return(pdx$P0010001)
}else{
data1
}
data1 <- if(input$radio == "Housing Units"){
return(pdx$H0010001)
}else{
data1
}
data1 <- if(input$radio == "Population per Housing Unit"){
pdx$pophu <- round(pdx$P0010001 / pdx$H0010001, 1)
pdx$pophu[is.infinite(pdx$pophu)] <- NA
return(pdx$pophu)
}else{
data1
}
data1 <- if(input$radio == "Vacant Housing Units (%)"){
return(round(pdx$H0030003/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Secondary Housing Units (%)"){
return(round(pdx$H0050006/pdx$H0010001,4)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Occupied Housing Units (%)"){
return(round(pdx$H0040004/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Ocdfsacupied Housing Units (%)"){
pdx$vac.ren <- pdx$H0050002 + pdx$H0040004
pdx$vac.ren <- round(pdx$vac.ren,3)*100
return()
}else{
data1
}
return(data1)
})
output$plot <- renderPlot({
#ratio.display <- 4/3
plot.data <- data.frame(pdx$fips, hist.data = data())
ggplot(data = plot.data, aes(x = hist.data, y =..count..)) +
theme_bw() +
geom_area(stat="bin", color = top.col, size = 1, fill=low.col) +
xlab(paste(input$radio, "by Block Group")) +
ylab("Number of Block Groups") +
ggtitle(paste("Distribution of",input$radio))  #+
#coord_fixed((max(data())-min(data()))/(max(y)-0) / ratio.display)
})
output$mymap <- renderLeaflet({
# Color scheme.
pal <- colorNumeric(
palette = c(low.col,mid.col, top.col),
domain = data()
)
# Make the map.
leaflet() %>%
addProviderTiles("Thunderforest.Outdoors") %>%
#addTiles() %>%
addPolygons(data = pdx,
popup = paste(input$radio,": ", data(), "<br>","Housing Units: ", pdx$H0010001),
fillColor= ~pal(data()),
weight = 1,
fillOpacity = 0.75,
color="black") %>%
addLegend("bottomright",
pal = pal,
values = data(),
title = input$radio,
opacity = 1)
})
}
# - - -
#  UI
# - - -
ui <- fluidPage(
navbarPage("2010 Census Data", id="nav",
tabPanel("Multnomah County",
div(class="outer",
tags$head(
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = 20,
right = "auto", bottom = "auto",
width = 300, height = "auto",
radioButtons("radio", label = "Select a Variable",
choices = list("Population",
"Housing Units",
"Population per Housing Unit",
"Vacant Housing Units (%)",
"Secondary Housing Units (%)",
"Renter Occupied Housing Units (%)"),
selected = "Population"),
"The (%) symbol indicates percentage
of total housing units."),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = "auto",
right = 20, bottom = "auto",
width = 400, height = "auto",
plotOutput("plot")
)
)
)
)
)
shinyApp(ui = ui, server = server)
#library(UScensus2010blkgrp)
# Load and subset data.
#data("oregon.blkgrp10")
#pdx <- oregon.blkgrp10[oregon.blkgrp10$county=='051',]
#saveRDS(pdx, "pdx.rds")
library(ggplot2)
library(leaflet)
library(shiny)
# Load data.
pdx <- readRDS("pdx.rds")
# Set colors.
top.col <- "darkorange"
mid.col <- "chartreuse4"
low.col <- "cadetblue4"
# - - - -
# SERVER
# - - - -
server <- function(input, output) {
# Pick relevant data.
data <- reactive({
data1 <- pdx$P0010001
data1 <- if(input$radio == "Population"){
return(pdx$P0010001)
}else{
data1
}
data1 <- if(input$radio == "Housing Units"){
return(pdx$H0010001)
}else{
data1
}
data1 <- if(input$radio == "Population per Housing Unit"){
pdx$pophu <- round(pdx$P0010001 / pdx$H0010001, 1)
pdx$pophu[is.infinite(pdx$pophu)] <- NA
return(pdx$pophu)
}else{
data1
}
data1 <- if(input$radio == "Vacant Housing Units (%)"){
return(round(pdx$H0030003/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Secondary Housing Units (%)"){
return(round(pdx$H0050006/pdx$H0010001,4)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Occupied Housing Units (%)"){
return(round(pdx$H0040004/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Ocdfsacupied Housing Units (%)"){
pdx$vac.ren <- pdx$H0050002 + pdx$H0040004
pdx$vac.ren <- round(pdx$vac.ren,3)*100
return()
}else{
data1
}
return(data1)
})
output$plot <- renderPlot({
#ratio.display <- 4/3
plot.data <- data.frame(pdx$fips, hist.data = data())
ggplot(data = plot.data, aes(x = hist.data, y =..count..)) +
theme_bw() +
geom_area(stat="bin", color = top.col, size = 1, fill=low.col) +
xlab(paste(input$radio, "by Block Group")) +
ylab("Number of Block Groups") +
ggtitle(paste("Distribution of",input$radio))  #+
#coord_fixed((max(data())-min(data()))/(max(y)-0) / ratio.display)
})
output$mymap <- renderLeaflet({
# Color scheme.
pal <- colorNumeric(
palette = c(low.col,mid.col, top.col),
domain = data()
)
# Make the map.
leaflet() %>%
addProviderTiles("Thunderforest.Outdoors") %>%
#addTiles() %>%
addPolygons(data = pdx,
popup = paste(input$radio,": ", data(), "<br>","Housing Units: ", pdx$H0010001),
fillColor= ~pal(data()),
weight = 1,
fillOpacity = 0.75,
color="black") %>%
addLegend("bottomright",
pal = pal,
values = data(),
title = input$radio,
opacity = 1)
})
}
# - - -
#  UI
# - - -
ui <- fluidPage(
navbarPage("2010 Census Data", id="nav",
tabPanel("Multnomah County",
div(class="outer",
tags$head(
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = 20,
right = "auto", bottom = "auto",
width = 300, height = "auto",
radioButtons("radio", label = "Select a Variable",
choices = list("Population",
"Housing Units",
"Population per Housing Unit",
"Vacant Housing Units (%)",
"Secondary Housing Units (%)",
"Renter Occupied Housing Units (%)"),
selected = "Population"),
"The (%) symbol indicates percentage
of total housing units."),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = "auto",
right = 20, bottom = "auto",
width = 400, height = "auto",
plotOutput("plot")
)
)
)
)
)
shinyApp(ui = ui, server = server)
#library(UScensus2010blkgrp)
# Load and subset data.
#data("oregon.blkgrp10")
#pdx <- oregon.blkgrp10[oregon.blkgrp10$county=='051',]
#saveRDS(pdx, "pdx.rds")
library(ggplot2)
library(leaflet)
library(shiny)
# Load data.
pdx <- readRDS("pdx.rds")
# Set colors.
top.col <- "darkorange"
mid.col <- "chartreuse4"
low.col <- "cadetblue4"
# - - - -
# SERVER
# - - - -
server <- function(input, output) {
# Pick relevant data.
data <- reactive({
data1 <- pdx$P0010001
data1 <- if(input$radio == "Population"){
return(pdx$P0010001)
}else{
data1
}
data1 <- if(input$radio == "Housing Units"){
return(pdx$H0010001)
}else{
data1
}
data1 <- if(input$radio == "Population per Housing Unit"){
pdx$pophu <- round(pdx$P0010001 / pdx$H0010001, 1)
pdx$pophu[is.infinite(pdx$pophu)] <- NA
return(pdx$pophu)
}else{
data1
}
data1 <- if(input$radio == "Vacant Housing Units (%)"){
return(round(pdx$H0030003/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Secondary Housing Units (%)"){
return(round(pdx$H0050006/pdx$H0010001,4)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Occupied Housing Units (%)"){
return(round(pdx$H0040004/pdx$H0010001,3)*100)
}else{
data1
}
data1 <- if(input$radio == "Renter Ocdfsacupied Housing Units (%)"){
pdx$vac.ren <- pdx$H0050002 + pdx$H0040004
pdx$vac.ren <- round(pdx$vac.ren,3)*100
return()
}else{
data1
}
return(data1)
})
output$plot <- renderPlot({
#ratio.display <- 4/3
plot.data <- data.frame(pdx$fips, hist.data = data())
ggplot(data = plot.data, aes(x = hist.data, y =..count..)) +
theme_bw() +
geom_area(stat="bin", color = top.col, size = 1, fill=low.col) +
xlab(paste(input$radio, "by Block Group")) +
ylab("Number of Block Groups") +
ggtitle(paste("Distribution of",input$radio))  #+
#coord_fixed((max(data())-min(data()))/(max(y)-0) / ratio.display)
})
output$mymap <- renderLeaflet({
# Color scheme.
pal <- colorNumeric(
palette = c(low.col,mid.col, top.col),
domain = data()
)
# Make the map.
leaflet() %>%
addProviderTiles("Thunderforest.Outdoors") %>%
#addTiles() %>%
addPolygons(data = pdx,
popup = paste(input$radio,": ", data(), "<br>","Housing Units: ", pdx$H0010001),
fillColor= ~pal(data()),
weight = 1,
fillOpacity = 0.75,
color="black") %>%
addLegend("bottomright",
pal = pal,
values = data(),
title = input$radio,
opacity = 1)
})
}
# - - -
#  UI
# - - -
ui <- fluidPage(
navbarPage("2010 Census Data", id="nav",
tabPanel("Multnomah County",
div(class="outer",
tags$head(
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = 20,
right = "auto", bottom = "auto",
width = 300, height = "auto",
radioButtons("radio", label = "Select a Variable",
choices = list("Population",
"Housing Units",
"Population per Housing Unit",
"Vacant Housing Units (%)",
"Secondary Housing Units (%)",
"Renter Occupied Housing Units (%)"),
selected = "Population"),
"The (%) symbol indicates percentage
of total housing units."),
absolutePanel(id = "controls", class = "panel panel-default",
fixed = TRUE,
draggable = TRUE, top = 60, left = "auto",
right = 20, bottom = "auto",
width = 400, height = "auto",
plotOutput("plot")
)
)
)
)
)
shinyApp(ui = ui, server = server)
